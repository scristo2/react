###dentro de pages creamos una carpeta llamada api/ejemplo.jsx

import _fetch from "isomorphic-fetch";
export default async function handler(req, res){

    if(req.method === "POST"){

        const aa = await _fetch("https://orfibesa.es")
        .then(res => {

            if(!res.ok || res.status !== 200){

                throw new Error('error');
            
            }else{

                 return res.json();
            }
        }).then(data => console.log(data))
        .catch(e => e);

        console.log("mi nombre es " + req.body.username);
        
         res.status(200).json({username : "ada lovelda"});
        
        #------------post urlencoded
         const formData = new URLSearchParams();

            formData.append('response', req.body.tokenCaptcha);
            formData.append('secret', process.env.SECRET_HCAPTCHA);

            const answerCaptcha = await _fetch("https://hcaptcha.com/siteverify", {

                  method: 'POST',
                  body: formData.toString(),
                  headers: {

                        'Content-Type': 'application/x-www-form-urlencoded'
                  }
            }).then(res => {

                  if (!res.ok || res.status !== 200) {

                        throw new Error(true);

                  } else {

                        return res.json();
                  }
            }).catch((e) => false);

    }

    res.status(200).json(answerCapctha);
}



####en la pagina donde vayas a usarlo crwmao el form

class App extends Component {

    constructor(props) {

        super(props);

        this.state = {

            datas: this.props.data,
            nameUser : ""
        }

    }


    register = async (e) => {

        e.preventDefault();

        const res = await _fetch("/api/register",{

            method: "POST",
            body : JSON.stringify({

                username: this.state.nameUser
            }),
            headers : {

                'Content-Type' : "application/json"
            }
        }).then(response => {

             if(!response.ok || response.status !== 200){

                throw new Error('error');
             
            }else{

                return response.json();
            }
        
        })
        .then(result => console.log(result.username))
        .catch(e => console.log('ha ocurrido un error'));
    }



    render() {

        

        return (

            <div className="ss">
                <Container title="home">
                    <h1>Home</h1>
                    {/*<Users users={this.state.datas}/>*/}
                </Container>
                <form onSubmit={this.register}>
                    <input type="password" name="username" placeholder="username" onChange={(e) => {
                        this.setState({nameUser : e.target.value});
                    }} required />
                    <input type="password" placeholder="contraseÃ±a" required />
                    <input type="submit" value={"register"} />
                </form>
            </div>

        );
    }
}

export async function getServerSideProps() {

    const datas = await _fetch("https://reqres.in/api/users")
        .then(response => {

            if (!response.ok || response.status !== 200) {

                throw new Error(false);

            } else {

                return response.json();
            }   
        })
        .then(res => res.data)
        .catch(e => false);


        console.log(datas);


    if (!datas) {

        return {

            notFound: true
        }

    } else {

        return {

            props: {

                data: datas
            }
        }
    }
}

export default App;
